;;; Mode: Lisp; Package: ocml(in-package "OCML")(in-ontology NIL);;;Automatically translated from RDF file "OCML:library;rdfs;aktive-portal-ontology.rdfs";;;at 19:42:57, on 30/4/2004(def-class ACTIVITY (temporal-thing)((Has-Sub-Activity :type activity)(Produces-Output530 :type thing)(Uses-Resource :type thing)(Has-Status597 :type activity-status)))(def-class GENERIC-AREA-OF-INTEREST (intangible-thing)"A generic class to specify generic areas for research or business initiatives. For instance, the area in which a project is situated"((Sub-Area-Of507 :type generic-area-of-interest)))(def-class GENDER (intangible-thing)"HPKB says that genders are intangible..Uhm..."())(def-class ORGANIZATION-SIZE (intangible-thing)"We use EU guidelines to distinguish between different organization sizes"())(def-class AMOUNT-OF-MONEY (physical-quantity)((Has-Amount596 :type number)))(def-class ISBN-NUMBER (string)())(def-class METHOD (intangible-thing)"Merrian-Webster has a good set of definitions for a method. They say it is 'a systematic procedure, technique, or mode of inquiry employed by or proper to a particular discipline or art; a systematic plan followed in presenting material for instruction; a way, technique, or process of or for doing something; a body of skills or techniques'. This is very much also what we mean by method."((Has-Key-Publication513 :type publication)(Has-Publication515 :type publication)(Has-Author531 :type person)(Owned-By538 :type organization)(Has-Email-Address569 :type email-address)(Addresses-Generic-Area-Of-Interest581 :type generic-area-of-interest)(Has-Web-Address589 :type url)(Method-Builds-On :type method)))(def-class EMPLOYMENT-CONTRACT-TYPE (intangible-thing)())(def-class WORK-STATUS (intangible-thing)())(def-class TECHNOLOGY (temporal-thing)"By technology we mean engineered applications of science. I guess we are probably confining ourselves to tangible things but as I am not sure I will use thing as the direct superclass - e.g., an algorithm is an intangible thing, but it could be seen as a technology, if we give a broad interpretation of the term"((Technology-Builds-On :type technology)(Has-Key-Publication514 :type publication)(Has-Publication516 :type publication)(Has-Author532 :type generic-agent)(Owned-By539 :type legal-agent)(Supports-Method :type method)(Has-Email-Address570 :type email-address)(Addresses-Generic-Area-Of-Interest582 :type generic-area-of-interest)(Has-Web-Address590 :type url)))(def-class INFORMATION-BEARING-OBJECT (tangible-thing)"This notion comes from Cyc. It is useful to group together all information bearing entities, including video, audio and documents. An information bearing object may have an author (a generic agent) and may be owned by a legal agent. It is a tangible object"((Has-Author538 :type generic-agent)(Owned-By540 :type legal-agent)))(def-class GEOGRAPHICAL-DATUM (intangible-thing)"A datum used to define a reference system, eg. World Geodetic System 1984, Ordnance Survey of Great Britain Datum 1936, etc."())(def-class AWARD (intangible-thing)"An award is an intangible thing, even if the piece of paper which is often associated with an award is tangible. What about the virtual piece of paper in the virtual degree ceremony? I guess that ought to be an intangible"())(def-class GENERIC-AGENT (temporal-thing)"This is a generic notion, an agent can be an organization, a person an animal, a software agent, etc"((Has-Email-Address571 :type email-address)(Has-Web-Address591 :type url)))(def-class SOFTWARE-STATUS (intangible-thing)())(def-class PROJECT-OUTPUT (temporal-thing)())(def-class APPELLATION (intangible-thing)())(def-class ACTIVITY-STATUS (string)())(def-class GENERALISED-MEANS-OF-TRANSPORT (thing)"This is a generic class to catch all sorts of borderline and metaphorical ways to carry things from A to B"())(def-class EVENT (temporal-thing)"This is a minimalist definition of class event. We start with the very basic and we will then add slots as we specialise this definition for specific classes of events. The fillers of slots has-other-agents-involved and has-main-agent should not intersect"((Has-Main-Agent526 :type generic-agent)(Has-Other-Agents-Involved529 :type generic-agent)(Has-Location541 :type location)(Has-Sub-Event :type event)))(def-class URL (string)"A URL is a particular type of string"())(def-class ABSTRACT-INFORMATION (intangible-thing)"Information in general, independent of an object in which it is encoded. Whatever is transferred in an information-transfer event. It is clearly an intangible thing"())(def-class LOCATION (tangible-thing)"A generic class for locations. It includes both real and fantastic places"())(def-class PUBLICATION-REFERENCE (abstract-information temporal-thing)"we have decided that a publication reference is an intangible, abstract information"((Has-Date :type calendar-date)(Has-Author536 :type generic-agent)(Has-Title564 :type string)(Has-Place-Of-Publication :type location)))(def-class TRANSPORTATION-DEVICE (tangible-thing generalised-means-of-transport)"Something tangible designed to transport people, animals, objects from A to B. For instance a bycicle, a car, a boat, etc."())(def-class SOCIAL-GATHERING (event)())(def-class RECORDED-AUDIO (information-bearing-object)"Any kind of recorded audio, which is tangible. This also includes a audio file on a machine"())(def-class ATTENDING-AN-EVENT (event)((Event-Attended566 :type event)))(def-class MESSAGE (information-bearing-object)((Sender-Of-Message :type generic-agent)(Time-Of-Message :type time-point)(Recipient-Of-Message :type generic-agent)))(def-class INFORMATION-TRANSFER-MEDIUM (generalised-means-of-transport)())(def-class EVENT-INVOLVING-MOVEMENT (event)"This is an event in which the main agent (plus maybe others) goes from some place to another"((Has-Location540 :type location)(Location-At-End :type location)(Location-At-Start :type location)(Means-Of-Transport-Used584 :type generalised-means-of-transport)))(def-class COMPUTING-TECHNOLOGY (technology)())(def-class LEGAL-AGENT (generic-agent)"Some agents have legal status: definitely organizations and people, anybody else?"((Has-Telephone-Number510 :type string)(Has-Postal-Address521 :type postal-address)(Has-Fax-Number531 :type string)))(def-class RECORDED-VIDEO (information-bearing-object)"Any kind of recorded video, which is tangible. This also includes (e.g.,) a mpeg video file on a machine"())(def-class PUBLICATION (information-bearing-object)"A publication is something which has one or more publication references. A publication can be both an article in a journal or a journal itself. The distinction between publication and publication-reference makes it possible to distinguish between multiple occurrences of the sam publication, for instance in different media"((Has-Author537 :type generic-agent)(Has-Publication-Reference544 :type publication-reference)(Has-Abstract :type string)(Cites-Publication-Reference :type publication-reference)(Has-Title565 :type string)))(def-class RESEARCH-AREA (generic-area-of-interest)((Sub-Area-Of506 :type generic-area-of-interest)))(def-class DEGREE (award)"A degree is type of award"())(def-class ADDRESS (abstract-information)"A generic class for addresses, whether email or postal. We see an address as abstract information and therefore it is an intangible thing"())(def-class CURRENCY (information-bearing-object)((Issued-By :type government)(Has-Iso4217-Code :type string)(Has-Currency-Symbol :type string)))(def-class EVENT-INVOLVING-PRODUCTION (event)"When something is produced"((Event-Product520 :type individual)))(def-class GEOGRAPHICAL-REGION (location)"'Real' geographical regions"())(def-class ORGANIZATION-UNIT (generic-agent)"An organization may have a number of units. Units may themselves have sub-units"((Headed-By508 :type affiliated-person)(Has-Telephone-Number509 :type string)(Has-Postal-Address520 :type postal-address)(Has-Fax-Number530 :type string)(Sub-Unit-Of-Organization-Unit :type organization-unit)(Unit-Of-Organization569 :type organization)(Has-Affiliated-Person584 :type affiliated-person)(Has-Sub-Unit593 :type organization-unit)(Has-Size598 :type organization-size)))(def-class FINANCIAL-AWARD (award)((Has-Amount595 :type amount-of-money)))(def-class BUSINESS-AREA (generic-area-of-interest)())(def-class PROJECT (activity)((Involves-Organization-Unit :type organization-unit)(Has-Leading-Organization :type organization)(Has-Key-Publication512 :type publication)(Has-Publication514 :type publication)(Has-Funding :type grant)(Has-Project-Member :type person)(Contributes-To-Output :type project-output)(Produces-Output529 :type project-output)(Has-Goals :type string)(Has-Project-Leader :type person)(Addresses-Generic-Area-Of-Interest572 :type generic-area-of-interest)(Has-Web-Address588 :type url)(Involves-Organization :type organization)))(def-class WORKSHOP-PROCEEDINGS-REFERENCE (publication-reference)((Edited-By501 :type person)(Published-In-Workshop :type workshop)(Has-Author533 :type person)(Has-Page-Numbers547 :type string)))(def-class ATTENDING-A-CONFERENCE (attending-an-event)((Event-Attended565 :type conference)))(def-class HARDWARE-TECHNOLOGY (computing-technology)())(def-class AWARDING-BODY (legal-agent)"Legal agents can be either organizations or people. An awarding body is normally an organization, an individual, or a bunch of people"())(def-class WEB-TECHNOLOGY (computing-technology)((Addresses-Generic-Area-Of-Interest580 :type generic-area-of-interest)))(def-class EDUCATIONAL-ORGANIZATION-UNIT (organization-unit)((Unit-Of-Organization568 :type educational-organization)))(def-class GRANT (financial-award)((Has-Grant-Reference :type string)(Has-Grant-Value :type amount-of-money)(Has-Funding-Source :type organization)(Has-Amount594 :type amount-of-money)))(def-class COORDINATE-LOCATION (geographical-region)((Has-Longitude :type number)(Has-Latitude :type number)(Has-Geographical-Datum :type geographical-datum)))(def-class TECHNICAL-REPORT-REFERENCE (publication-reference)((Published-By526 :type organization)(Has-Tech-Report-Number :type integer)))(def-class ARTICLE-IN-A-COMPOSITE-PUBLICATION (publication)((Included-In-Publication :type composite-publication)))(def-class POSTAL-ADDRESS (address)"Modified to allow addresses to be given as strings, with no structure"((Address-Number :type integer)(Address-Postcode :type string)(Address-Area :type local-district)(Address-City-Or-Village :type municipal-unit)(Address-Country :type country)(Address-Street :type string)(Address-Region :type geographical-region)(Address-Building :type string)(Address-Pretty-Label :type string)))(def-class SERIAL-PUBLICATION (publication)"This used to be called periodical publication. However, many periodicals do not appear at fixed intervals, which is why librarians refer to them as serials. So, we now use the concept of serial publication and the has-periodicity slot has been removed"((Has-Impact-Factor :type positive-number)))(def-class EMAIL-ADDRESS (address string)())(def-class BOOK (publication)((Has-Publication-Reference543 :type book-reference)))(def-class WEB-REFERENCE (publication-reference)((Has-Url549 :type url)))(def-class ACADEMIC-DEGREE (degree)())(def-class GENERALIZED-TRANSFER (event-involving-movement)"An event in which the main agent transfers something (the thing-acted-on, tangible or intangible) to one or more recipient agents. Note that we do not say anything about whether the original agent still retain the thing-acted-on. In some cases this is clearly true ('I pass my wisdom on to my daughter'), in other cases it is not (I give you my wallet)."((Has-Other-Agents-Involved528 :type generic-agent)(Recipient-Agents :type generic-agent)(Thing-Acted-On593 :type individual)))(def-class COMPOSITE-PUBLICATION (publication)"A publication which contains items which cane be themselves referenced through a publication reference. Composite publications include newspapers, magazines and journals. A book which is a collection of articles is a composite publication, a monograph is not"((Contains-Publication561 :type publication)))(def-class PUBLICATION-TYPE-EVENT (event-involving-production)((Event-Product519 :type individual)))(def-class PERSON (tangible-thing legal-agent)((Has-Family-Name :type string)(Has-Full-Name :type string)(Has-Gender :type gender)(Has-Given-Name :type string)(Has-Appellation :type appellation)(Has-Academic-Degree :type academic-degree)))(def-class GEOPOLITICAL-ENTITY (generic-agent geographical-region)"A geopolitical entity is a geographical area which is associated with some sort of political structure. For instance, Russia, Italy, The-city-of-Messina, etc.. A geopolitical entity can be also seen as an agent - e.g., France declared war to Spain"())(def-class BOOK-REFERENCE (publication-reference)((Published-By527 :type publishing-house)(Has-Isbn-Number :type isbn-number)))(def-class SOFTWARE-TECHNOLOGY (computing-technology)())(def-class THESIS-REFERENCE (publication-reference)((Degree-Of-Thesis :type academic-degree)(Institute-Of-Thesis :type academic-unit)))(def-class LETTER (message)())(def-class PROCEEDINGS-PAPER-REFERENCE (publication-reference)((Has-Page-Numbers544 :type string)(Paper-In-Proceedings :type conference-proceedings-reference)))(def-class CONFERENCE-PROCEEDINGS-REFERENCE (publication-reference)((Edited-By502 :type person)(Published-In-Conference :type conference)(Has-Author534 :type person)(Has-Page-Numbers548 :type string)))(def-class EMAIL-MESSAGE (message)())(def-class EDITED-BOOK (publication)((Has-Publication-Reference542 :type edited-book-reference)))(def-class BOOK-SECTION-REFERENCE (publication-reference)((Section-Of-Book :type book-reference)(Has-Page-Numbers546 :type string)))(def-class MEETING-TAKING-PLACE (social-gathering)"A meeting type of event. Note that both attendee and organizer have multiple cardinality"((Has-Main-Agent523 :type person)(Has-Other-Agents-Involved527 :type person)(Meeting-Attendee :type person)(Meeting-Organizer :type person)))(def-class ARTICLE-REFERENCE (publication-reference)((Has-Page-Numbers545 :type string)(Article-Of-Journal :type journal)(Issue-Volume :type integer)(Issue-Number :type integer)))(def-class ORGANIZATION (legal-agent)"An organization is a type of legal agent"((Organization-Part-Of :type organization)(Headed-By509 :type affiliated-person)(Has-Affiliated-Person585 :type affiliated-person)(Has-Sub-Unit594 :type organization-unit)(Has-Size599 :type organization-size)))(def-class PROFIT-ORGANIZATION (organization)((Subsidiary-Of :type profit-organization)))(def-class MAGAZINE (composite-publication serial-publication)((Contains-Article555 :type publication)(Contains-Publication559 :type publication)))(def-class ACADEMIC-UNIT (educational-organization-unit)((Unit-Of-Organization567 :type university)))(def-class PUBLISHING-HOUSE (organization)())(def-class LEARNING-CENTRED-ORGANIZATION (organization)())(def-class INFORMATION-TRANSFER-EVENT (generalized-transfer)"A generalized transfer in which information is passed from main agent to one or more recipient agents. Examples include giving a tutorial."((Has-Main-Agent525 :type generic-agent)(Sender-Of-Information563 :type generic-agent)(Information-Object-Being-Transferred567 :type information-bearing-object)(Means-Of-Transport-Used583 :type information-transfer-medium)(Information-Being-Transferred :type individual)(Information-Transfer-Medium-Used588 :type information-transfer-medium)(Thing-Acted-On592 :type individual)))(def-class LANGUAGE-ENGINEERING-TECHNOLOGY (software-technology)((Addresses-Generic-Area-Of-Interest578 :type generic-area-of-interest)))(def-class AFFILIATED-PERSON (person)"A person which has an affiliation with some organization. For instance employees are affiliated to the organization they work for, students to the institution where they are studying, etc.. A person can have multiple affiliations, which means that there is no constraint relating the values of slot has-affiliation-to-unit to the values of slot has-affiliation"((Has-Affiliation555 :type organization)(Has-Affiliation-To-Unit558 :type organization-unit)))(def-class CONFERENCE (publication-type-event meeting-taking-place)((Event-Product518 :type individual)(Published-Proceedings542 :type individual)))(def-class JOURNAL (composite-publication serial-publication)((Contains-Article556 :type publication)(Contains-Publication560 :type publication)))(def-class IMPLEMENTED-SYSTEM (software-technology)((Requires-Software-Technology501 :type software-technology)(Requires-Hardware-Platform572 :type hardware-platform)(Runs-On-Operating-System597 :type operating-system)(Has-Status598 :type software-status)))(def-class EDITED-BOOK-REFERENCE (book-reference)((Edited-By503 :type person)(Has-Author535 :type person)))(def-class ACADEMIC-SUPPORT-UNIT (educational-organization-unit)())(def-class PERIODICAL-PUBLICATION (serial-publication)"This comes from the ontolingua library. A periodical-publication is published regularly, such as once every week. Strictly speaking, the noun 'periodical' is used by librarians to refer to things published at intervals of greater than a day. We use the phase periodical-publication to include newspapers and other daily publications, since they share many bibliographic features. The periodicity indicates how often the publication comes out. Note that this is a duration, rather than a time interval. A time interval indicates a specific time interval on the time continuum, so we need to model periodicity as a time quantity"((Has-Periodicity586 :type duration)))(def-class MULTIMEDIA-TECHNOLOGY (software-technology)((Addresses-Generic-Area-Of-Interest579 :type generic-area-of-interest)))(def-class SPECIFICATION-OR-COMPUTING-LANGUAGE (software-technology)())(def-class AGENT-TECHNOLOGY (software-technology)((Addresses-Generic-Area-Of-Interest576 :type generic-area-of-interest)))(def-class WORKSHOP (publication-type-event meeting-taking-place)((Event-Product517 :type individual)(Published-Proceedings541 :type individual)))(def-class HARDWARE-PLATFORM (hardware-technology)())(def-class SOFTWARE-VISUALIZATION-TECHNOLOGY (software-technology)((Addresses-Generic-Area-Of-Interest575 :type generic-area-of-interest)))(def-class CONFERRING-AN-AWARD (generalized-transfer)((Has-Main-Agent522 :type generic-agent)(Has-Awarding-Body :type generic-agent)(Confers-Award :type individual)(Thing-Acted-On591 :type individual)(Has-Award-Rationale :type string)))(def-class ASSISTED-PERSON (person)())(def-class NON-PROFIT-ORGANIZATION (organization)())(def-class WORKING-PERSON (person)((Has-Work-Status :type work-status)))(def-class NEWS-ITEM (article-in-a-composite-publication)())(def-class LOCAL-DISTRICT (geopolitical-entity)())(def-class BOOK-PUBLISHING (publication-type-event)((Event-Product516 :type individual)(Published-Book :type individual)))(def-class SERVER-TECHNOLOGY (web-technology software-technology)())(def-class COUNTRY (geopolitical-entity)((Has-Currency :type currency)(Has-Government :type government)(Has-Capital :type capital-city)))(def-class POLITICAL-ORGANIZATION (organization)"An organization which has a political connotation"())(def-class MUNICIPAL-UNIT (geopolitical-entity)())(def-class SMALL-OR-MEDIUM-SIZED-ORGANIZATION (organization)"SME are important, so we define a class to represent them explicitly. In some case we might not know or we do not want to bother specifying excatly whether something is a small-organization or a medium-organization. Hence, we can just say 'x is a SME' without going into further detail."())(def-class KNOWLEDGE-MODELLING-TECHNOLOGY (software-technology)((Addresses-Generic-Area-Of-Interest574 :type generic-area-of-interest)))(def-class SELF-EMPLOYED-PERSON (working-person)())(def-class UNIVERSITY-FACULTY (academic-unit)())(def-class EMPLOYEE (working-person affiliated-person)((Works-For506 :type organization)(Has-Job-Title :type string)(Works-In-Unit :type organization-unit)(Has-Contract-Type :type employment-contract-type)(Has-Affiliation554 :type organization)(Has-Affiliation-To-Unit557 :type organization-unit)))(def-class SECRETARY (working-person)((Is-Secretary-Of :type assisted-person)))(def-class TOWN (municipal-unit)())(def-class EDUCATIONAL-ORGANIZATION (learning-centred-organization)())(def-class CHARITABLE-ORGANIZATION (non-profit-organization)())(def-class SPECIFICATION-LANGUAGE (specification-or-computing-language)())(def-class WEB-BASED-SYSTEM (implemented-system)"A system which is accessible through the web"((Requires-Software-Technology-On-Server-Side :type software-technology)(Runs-On-Operating-System-On-Client-Side :type operating-system)(Requires-Software-Technology500 :type software-technology)(Requires-Software-Technology-On-Client-Side :type software-technology)(Requires-Hardware-Platform571 :type hardware-platform)(Requires-Hardware-Platform-On-Client-Side :type hardware-platform)(Runs-On-Operating-System596 :type operating-system)(Runs-On-Operating-System-On-Server-Side :type operating-system)(Requires-Hardware-Platform-On-Server-Side :type hardware-platform)))(def-class SYSTEM-ADMINISTRATOR (working-person)())(def-class PARTNERSHIP (profit-organization)"A partnership is not necessarily a company, e.g. a consultancy firm is not a company"())(def-class NEWSPAPER (composite-publication periodical-publication)((Contains-News-Item :type publication)(Contains-Publication558 :type publication)))(def-class SENDING-AN-EMAIL (information-transfer-event)"a generalized transfer in which information is passed from main agent to one or more recipient agents. examples include giving a tutorial."((Has-Main-Agent524 :type generic-agent)(Sender-Of-Information562 :type generic-agent)(Information-Object-Being-Transferred566 :type email-message)(Means-Of-Transport-Used582 :type information-transfer-medium)(Information-Transfer-Medium-Used587 :type information-transfer-medium)))(def-class VILLAGE (municipal-unit)())(def-class WEB-SITE (information-bearing-object implemented-system)((Has-Url548 :type url)))(def-class OPERATING-SYSTEM (implemented-system)())(def-class INFORMATION-EXTRACTION-TECHNOLOGY (language-engineering-technology)((Addresses-Generic-Area-Of-Interest577 :type generic-area-of-interest)))(def-class EDITOR (implemented-system)((Supports-Language586 :type specification-or-computing-language)))(def-class GRAPHIC-DESIGNER (working-person)())(def-class RESEARCHER (working-person)((Has-Research-Interest510 :type research-area)))(def-class PROGRAMMING-ENVIRONMENT (implemented-system)((Supports-Language587 :type programming-language)))(def-class STUDENT (affiliated-person)((Has-Affiliation551 :type educational-organization)(Has-Affiliation-To-Unit556 :type educational-organization-unit)(Studies-In-Unit :type educational-organization-unit)(Studies-At564 :type educational-organization)))(def-class CITY (municipal-unit)())(def-class SOFTWARE-DEVELOPER (working-person)())(def-class COMPANY (profit-organization)())(def-class GOVERNMENT-ORGANIZATION (non-profit-organization)())(def-class INDUSTRIAL-ORGANIZATION (profit-organization)())(def-class MULTIMEDIA-DESIGNER (working-person)())(def-class R-AND-D-INSTITUTE (learning-centred-organization)())(def-class GIVING-A-TALK (information-transfer-event)((Has-Main-Agent521 :type person)(Sender-Of-Information561 :type person)(Has-Speaker :type person)))(def-class WEB-BROWSER (implemented-system)"A web browser is not a web-based system!"())(def-class PROGRAMMING-LANGUAGE (specification-or-computing-language)())(def-class WEB-BASED-EDITOR (web-based-system editor)())(def-class DAILY-NEWSPAPER (newspaper)((Has-Periodicity585 :type duration)))(def-class KNOWLEDGE-PROGRAMMING-LANGUAGE (knowledge-modelling-technology programming-language)"These are knowledge modelling languages which have an interpreter and that can be used to build systems"())(def-class PHD-STUDENT (student)((Has-Supervisor :type person)(Has-Research-Interest512 :type research-area)(Has-Affiliation550 :type higher-educational-organization)(Studies-At563 :type higher-educational-organization)))(def-class GOVERNMENT (government-organization)((Government-Of-Country :type country)))(def-class ONTOLOGY-SPECIFICATION-LANGUAGE (knowledge-modelling-technology specification-language)((Addresses-Generic-Area-Of-Interest573 :type generic-area-of-interest)))(def-class PRIVATE-COMPANY (company)())(def-class CIVIL-SERVICE (government-organization)())(def-class EDUCATIONAL-EMPLOYEE (employee)((Works-For505 :type educational-organization)(Has-Affiliation553 :type educational-organization)))(def-class CAPITAL-CITY (city)((Is-Capital-Of :type country)))(def-class R-AND-D-INSTITUTE-WITHIN-LARGER-ORGANIZATION (organization-unit r-and-d-institute)())(def-class VISITING-RESEARCHER (affiliated-person researcher)((Organization-Being-Visited :type organization)(Person-Being-Visited :type employee)(Organization-Unit-Being-Visited :type organization-unit)))(def-class HIGHER-EDUCATIONAL-ORGANIZATION (educational-organization)((Has-Support-Unit :type academic-support-unit)(Has-Academic-Unit :type academic-unit)))(def-class FREELANCE-SOFTWARE-DEVELOPER (self-employed-person software-developer)())(def-class SCRIPTING-LANGUAGE (programming-language)())(def-class PUBLIC-COMPANY (company)())(def-class SCHOOL (educational-organization)())(def-class ACADEMIC-SUPPORT-STAFF (educational-employee)((Works-For504 :type higher-educational-organization)(Has-Affiliation552 :type higher-educational-organization)))(def-class ACADEMIC (educational-employee)((Works-For503 :type higher-educational-organization)(Has-Research-Interest511 :type research-area)(Has-Affiliation549 :type higher-educational-organization)))(def-class R-AND-D-INSTITUTE-WITHIN-EDUCATIONAL-ORGANIZATION (r-and-d-institute-within-larger-organization)())(def-class UNIVERSITY (higher-educational-organization)((Headed-By507 :type educational-employee)(Has-Faculty :type university-faculty)(Has-Vice-Chancellor :type educational-employee)))(def-class OPERATIONAL-ONTOLOGY-SPECIFICATION-LANGUAGE (knowledge-programming-language ontology-specification-language)())(def-class PROJECT-OFFICER-IN-ACADEMIA (academic-support-staff)())(def-class READER-IN-ACADEMIA (academic)())(def-class PROFESSOR-IN-ACADEMIA (academic)())(def-class DISTANCE-TEACHING-UNIVERSITY (university)())(def-class LECTURER-IN-ACADEMIA (academic)())(def-class SENIOR-LECTURER-IN-ACADEMIA (academic)())(def-class RESEARCHER-IN-ACADEMIA (researcher academic)())(def-class RESEARCH-FELLOW-IN-ACADEMIA (researcher-in-academia)())(def-class RESEARCH-ASSISTANT-IN-ACADEMIA (researcher-in-academia)())(def-class SENIOR-RESEARCH-FELLOW-IN-ACADEMIA (researcher-in-academia)())(def-relation HAS-SECRETARY (?x ?y):pretty-name "has-secretary")(def-relation INVOLVES-ORGANIZATION-UNIT (?x ?y)"It is sufficient that somebody in unit ?u works in project ?p ":pretty-name "involves-organization-unit":constraint (and (organization-unit ?y)))(def-relation REQUIRES-SOFTWARE-TECHNOLOGY (?x ?y):pretty-name "requires-software-technology")(def-instance REQUIRES-SOFTWARE-TECHNOLOGY500 binary-relation((Sub-Property-Of REQUIRES-SOFTWARE-TECHNOLOGY)))(def-rule REQUIRES-SOFTWARE-TECHNOLOGY500-IS-SUB-PROPERTY-OF-REQUIRES-SOFTWARE-TECHNOLOGY ((requires-software-technology ?x ?y) if (requires-software-technology500 ?x ?y)))(def-instance REQUIRES-SOFTWARE-TECHNOLOGY501 binary-relation((Sub-Property-Of REQUIRES-SOFTWARE-TECHNOLOGY)))(def-rule REQUIRES-SOFTWARE-TECHNOLOGY501-IS-SUB-PROPERTY-OF-REQUIRES-SOFTWARE-TECHNOLOGY ((requires-software-technology ?x ?y) if (requires-software-technology501 ?x ?y)))(def-relation EDITED-BY (?x ?y):pretty-name "edited-by")(def-instance EDITED-BY501 binary-relation((Sub-Property-Of EDITED-BY)))(def-rule EDITED-BY501-IS-SUB-PROPERTY-OF-EDITED-BY ((edited-by ?x ?y) if (edited-by501 ?x ?y)))(def-instance EDITED-BY502 binary-relation((Sub-Property-Of EDITED-BY)))(def-rule EDITED-BY502-IS-SUB-PROPERTY-OF-EDITED-BY ((edited-by ?x ?y) if (edited-by502 ?x ?y)))(def-instance EDITED-BY503 binary-relation((Sub-Property-Of EDITED-BY)))(def-rule EDITED-BY503-IS-SUB-PROPERTY-OF-EDITED-BY ((edited-by ?x ?y) if (edited-by503 ?x ?y)))(def-relation WORKS-FOR (?x ?y):pretty-name "works-for")(def-instance WORKS-FOR503 binary-relation((Sub-Property-Of WORKS-FOR)))(def-rule WORKS-FOR503-IS-SUB-PROPERTY-OF-WORKS-FOR ((works-for ?x ?y) if (works-for503 ?x ?y)))(def-instance WORKS-FOR504 binary-relation((Sub-Property-Of WORKS-FOR)))(def-rule WORKS-FOR504-IS-SUB-PROPERTY-OF-WORKS-FOR ((works-for ?x ?y) if (works-for504 ?x ?y)))(def-instance WORKS-FOR505 binary-relation((Sub-Property-Of WORKS-FOR)))(def-rule WORKS-FOR505-IS-SUB-PROPERTY-OF-WORKS-FOR ((works-for ?x ?y) if (works-for505 ?x ?y)))(def-instance WORKS-FOR506 binary-relation((Sub-Property-Of WORKS-FOR)))(def-rule WORKS-FOR506-IS-SUB-PROPERTY-OF-WORKS-FOR ((works-for ?x ?y) if (works-for506 ?x ?y)))(def-relation SUB-AREA-OF (?x ?y):pretty-name "sub-area-of")(def-instance SUB-AREA-OF506 binary-relation((Sub-Property-Of SUB-AREA-OF)))(def-rule SUB-AREA-OF506-IS-SUB-PROPERTY-OF-SUB-AREA-OF ((sub-area-of ?x ?y) if (sub-area-of506 ?x ?y)))(def-instance SUB-AREA-OF507 binary-relation((Sub-Property-Of SUB-AREA-OF)))(def-rule SUB-AREA-OF507-IS-SUB-PROPERTY-OF-SUB-AREA-OF ((sub-area-of ?x ?y) if (sub-area-of507 ?x ?y)))(def-relation HEADED-BY (?x ?y):pretty-name "headed-by")(def-instance HEADED-BY507 binary-relation((Sub-Property-Of HEADED-BY)))(def-rule HEADED-BY507-IS-SUB-PROPERTY-OF-HEADED-BY ((headed-by ?x ?y) if (headed-by507 ?x ?y)))(def-instance HEADED-BY508 binary-relation((Sub-Property-Of HEADED-BY)))(def-rule HEADED-BY508-IS-SUB-PROPERTY-OF-HEADED-BY ((headed-by ?x ?y) if (headed-by508 ?x ?y)))(def-instance HEADED-BY509 binary-relation((Sub-Property-Of HEADED-BY)))(def-rule HEADED-BY509-IS-SUB-PROPERTY-OF-HEADED-BY ((headed-by ?x ?y) if (headed-by509 ?x ?y)))(def-relation HAS-TELEPHONE-NUMBER (?x ?y):pretty-name "has-telephone-number")(def-instance HAS-TELEPHONE-NUMBER509 binary-relation((Sub-Property-Of HAS-TELEPHONE-NUMBER)))(def-rule HAS-TELEPHONE-NUMBER509-IS-SUB-PROPERTY-OF-HAS-TELEPHONE-NUMBER ((has-telephone-number ?x ?y) if (has-telephone-number509 ?x ?y)))(def-instance HAS-TELEPHONE-NUMBER510 binary-relation((Sub-Property-Of HAS-TELEPHONE-NUMBER)))(def-rule HAS-TELEPHONE-NUMBER510-IS-SUB-PROPERTY-OF-HAS-TELEPHONE-NUMBER ((has-telephone-number ?x ?y) if (has-telephone-number510 ?x ?y)))(def-relation HAS-RESEARCH-INTEREST (?x ?y)"People and in general even organizations and organization units may have research interests. This relation shoudl be used to specify them ":pretty-name "has-research-interest")(def-relation HAS-RESEARCH-INTEREST510 (?x ?y)"People and in general even organizations and organization units may have research interests. This relation shoudl be used to specify them ":pretty-name "has-research-interest510":constraint (and (research-area ?y)))(def-instance HAS-RESEARCH-INTEREST510 binary-relation((Sub-Property-Of HAS-RESEARCH-INTEREST)))(def-rule HAS-RESEARCH-INTEREST510-IS-SUB-PROPERTY-OF-HAS-RESEARCH-INTEREST ((has-research-interest ?x ?y) if (has-research-interest510 ?x ?y)))(def-relation HAS-RESEARCH-INTEREST511 (?x ?y)"People and in general even organizations and organization units may have research interests. This relation shoudl be used to specify them ":pretty-name "has-research-interest511":constraint (and (research-area ?y)))(def-instance HAS-RESEARCH-INTEREST511 binary-relation((Sub-Property-Of HAS-RESEARCH-INTEREST)))(def-rule HAS-RESEARCH-INTEREST511-IS-SUB-PROPERTY-OF-HAS-RESEARCH-INTEREST ((has-research-interest ?x ?y) if (has-research-interest511 ?x ?y)))(def-relation HAS-RESEARCH-INTEREST512 (?x ?y)"People and in general even organizations and organization units may have research interests. This relation shoudl be used to specify them ":pretty-name "has-research-interest512":constraint (and (research-area ?y)))(def-instance HAS-RESEARCH-INTEREST512 binary-relation((Sub-Property-Of HAS-RESEARCH-INTEREST)))(def-rule HAS-RESEARCH-INTEREST512-IS-SUB-PROPERTY-OF-HAS-RESEARCH-INTEREST ((has-research-interest ?x ?y) if (has-research-interest512 ?x ?y)))(def-relation HAS-KEY-PUBLICATION (?x ?y):pretty-name "has-key-publication")(def-instance HAS-KEY-PUBLICATION512 binary-relation((Sub-Property-Of HAS-KEY-PUBLICATION)))(def-rule HAS-KEY-PUBLICATION512-IS-SUB-PROPERTY-OF-HAS-KEY-PUBLICATION ((has-key-publication ?x ?y) if (has-key-publication512 ?x ?y)))(def-instance HAS-KEY-PUBLICATION513 binary-relation((Sub-Property-Of HAS-KEY-PUBLICATION)))(def-rule HAS-KEY-PUBLICATION513-IS-SUB-PROPERTY-OF-HAS-KEY-PUBLICATION ((has-key-publication ?x ?y) if (has-key-publication513 ?x ?y)))(def-instance HAS-KEY-PUBLICATION514 binary-relation((Sub-Property-Of HAS-KEY-PUBLICATION)))(def-rule HAS-KEY-PUBLICATION514-IS-SUB-PROPERTY-OF-HAS-KEY-PUBLICATION ((has-key-publication ?x ?y) if (has-key-publication514 ?x ?y)))(def-relation HAS-PUBLICATION (?x ?y):pretty-name "has-publication")(def-instance HAS-PUBLICATION514 binary-relation((Sub-Property-Of HAS-PUBLICATION)))(def-rule HAS-PUBLICATION514-IS-SUB-PROPERTY-OF-HAS-PUBLICATION ((has-publication ?x ?y) if (has-publication514 ?x ?y)))(def-instance HAS-PUBLICATION515 binary-relation((Sub-Property-Of HAS-PUBLICATION)))(def-rule HAS-PUBLICATION515-IS-SUB-PROPERTY-OF-HAS-PUBLICATION ((has-publication ?x ?y) if (has-publication515 ?x ?y)))(def-instance HAS-PUBLICATION516 binary-relation((Sub-Property-Of HAS-PUBLICATION)))(def-rule HAS-PUBLICATION516-IS-SUB-PROPERTY-OF-HAS-PUBLICATION ((has-publication ?x ?y) if (has-publication516 ?x ?y)))(def-relation EVENT-PRODUCT (?x ?y):pretty-name "event-product")(def-instance EVENT-PRODUCT516 binary-relation((Sub-Property-Of EVENT-PRODUCT)))(def-rule EVENT-PRODUCT516-IS-SUB-PROPERTY-OF-EVENT-PRODUCT ((event-product ?x ?y) if (event-product516 ?x ?y)))(def-instance EVENT-PRODUCT517 binary-relation((Sub-Property-Of EVENT-PRODUCT)))(def-rule EVENT-PRODUCT517-IS-SUB-PROPERTY-OF-EVENT-PRODUCT ((event-product ?x ?y) if (event-product517 ?x ?y)))(def-instance EVENT-PRODUCT518 binary-relation((Sub-Property-Of EVENT-PRODUCT)))(def-rule EVENT-PRODUCT518-IS-SUB-PROPERTY-OF-EVENT-PRODUCT ((event-product ?x ?y) if (event-product518 ?x ?y)))(def-instance EVENT-PRODUCT519 binary-relation((Sub-Property-Of EVENT-PRODUCT)))(def-rule EVENT-PRODUCT519-IS-SUB-PROPERTY-OF-EVENT-PRODUCT ((event-product ?x ?y) if (event-product519 ?x ?y)))(def-instance EVENT-PRODUCT520 binary-relation((Sub-Property-Of EVENT-PRODUCT)))(def-rule EVENT-PRODUCT520-IS-SUB-PROPERTY-OF-EVENT-PRODUCT ((event-product ?x ?y) if (event-product520 ?x ?y)))(def-relation HAS-POSTAL-ADDRESS (?x ?y):pretty-name "has-postal-address")(def-instance HAS-POSTAL-ADDRESS520 binary-relation((Sub-Property-Of HAS-POSTAL-ADDRESS)))(def-rule HAS-POSTAL-ADDRESS520-IS-SUB-PROPERTY-OF-HAS-POSTAL-ADDRESS ((has-postal-address ?x ?y) if (has-postal-address520 ?x ?y)))(def-instance HAS-POSTAL-ADDRESS521 binary-relation((Sub-Property-Of HAS-POSTAL-ADDRESS)))(def-rule HAS-POSTAL-ADDRESS521-IS-SUB-PROPERTY-OF-HAS-POSTAL-ADDRESS ((has-postal-address ?x ?y) if (has-postal-address521 ?x ?y)))(def-relation HAS-MAIN-AGENT (?x ?y):pretty-name "has-main-agent")(def-instance HAS-MAIN-AGENT521 binary-relation((Sub-Property-Of HAS-MAIN-AGENT)))(def-rule HAS-MAIN-AGENT521-IS-SUB-PROPERTY-OF-HAS-MAIN-AGENT ((has-main-agent ?x ?y) if (has-main-agent521 ?x ?y)))(def-instance HAS-MAIN-AGENT522 binary-relation((Sub-Property-Of HAS-MAIN-AGENT)))(def-rule HAS-MAIN-AGENT522-IS-SUB-PROPERTY-OF-HAS-MAIN-AGENT ((has-main-agent ?x ?y) if (has-main-agent522 ?x ?y)))(def-instance HAS-MAIN-AGENT523 binary-relation((Sub-Property-Of HAS-MAIN-AGENT)))(def-rule HAS-MAIN-AGENT523-IS-SUB-PROPERTY-OF-HAS-MAIN-AGENT ((has-main-agent ?x ?y) if (has-main-agent523 ?x ?y)))(def-instance HAS-MAIN-AGENT524 binary-relation((Sub-Property-Of HAS-MAIN-AGENT)))(def-rule HAS-MAIN-AGENT524-IS-SUB-PROPERTY-OF-HAS-MAIN-AGENT ((has-main-agent ?x ?y) if (has-main-agent524 ?x ?y)))(def-instance HAS-MAIN-AGENT525 binary-relation((Sub-Property-Of HAS-MAIN-AGENT)))(def-rule HAS-MAIN-AGENT525-IS-SUB-PROPERTY-OF-HAS-MAIN-AGENT ((has-main-agent ?x ?y) if (has-main-agent525 ?x ?y)))(def-instance HAS-MAIN-AGENT526 binary-relation((Sub-Property-Of HAS-MAIN-AGENT)))(def-rule HAS-MAIN-AGENT526-IS-SUB-PROPERTY-OF-HAS-MAIN-AGENT ((has-main-agent ?x ?y) if (has-main-agent526 ?x ?y)))(def-relation PUBLISHED-BY (?x ?y):pretty-name "published-by")(def-instance PUBLISHED-BY526 binary-relation((Sub-Property-Of PUBLISHED-BY)))(def-rule PUBLISHED-BY526-IS-SUB-PROPERTY-OF-PUBLISHED-BY ((published-by ?x ?y) if (published-by526 ?x ?y)))(def-instance PUBLISHED-BY527 binary-relation((Sub-Property-Of PUBLISHED-BY)))(def-rule PUBLISHED-BY527-IS-SUB-PROPERTY-OF-PUBLISHED-BY ((published-by ?x ?y) if (published-by527 ?x ?y)))(def-relation HAS-OTHER-AGENTS-INVOLVED (?x ?y):pretty-name "has-other-agents-involved")(def-instance HAS-OTHER-AGENTS-INVOLVED527 binary-relation((Sub-Property-Of HAS-OTHER-AGENTS-INVOLVED)))(def-rule HAS-OTHER-AGENTS-INVOLVED527-IS-SUB-PROPERTY-OF-HAS-OTHER-AGENTS-INVOLVED ((has-other-agents-involved ?x ?y) if (has-other-agents-involved527 ?x ?y)))(def-instance HAS-OTHER-AGENTS-INVOLVED528 binary-relation((Sub-Property-Of HAS-OTHER-AGENTS-INVOLVED)))(def-rule HAS-OTHER-AGENTS-INVOLVED528-IS-SUB-PROPERTY-OF-HAS-OTHER-AGENTS-INVOLVED ((has-other-agents-involved ?x ?y) if (has-other-agents-involved528 ?x ?y)))(def-instance HAS-OTHER-AGENTS-INVOLVED529 binary-relation((Sub-Property-Of HAS-OTHER-AGENTS-INVOLVED)))(def-rule HAS-OTHER-AGENTS-INVOLVED529-IS-SUB-PROPERTY-OF-HAS-OTHER-AGENTS-INVOLVED ((has-other-agents-involved ?x ?y) if (has-other-agents-involved529 ?x ?y)))(def-relation PRODUCES-OUTPUT (?x ?y):pretty-name "produces-output")(def-instance PRODUCES-OUTPUT529 binary-relation((Sub-Property-Of PRODUCES-OUTPUT)))(def-rule PRODUCES-OUTPUT529-IS-SUB-PROPERTY-OF-PRODUCES-OUTPUT ((produces-output ?x ?y) if (produces-output529 ?x ?y)))(def-instance PRODUCES-OUTPUT530 binary-relation((Sub-Property-Of PRODUCES-OUTPUT)))(def-rule PRODUCES-OUTPUT530-IS-SUB-PROPERTY-OF-PRODUCES-OUTPUT ((produces-output ?x ?y) if (produces-output530 ?x ?y)))(def-relation HAS-FAX-NUMBER (?x ?y):pretty-name "has-fax-number")(def-instance HAS-FAX-NUMBER530 binary-relation((Sub-Property-Of HAS-FAX-NUMBER)))(def-rule HAS-FAX-NUMBER530-IS-SUB-PROPERTY-OF-HAS-FAX-NUMBER ((has-fax-number ?x ?y) if (has-fax-number530 ?x ?y)))(def-instance HAS-FAX-NUMBER531 binary-relation((Sub-Property-Of HAS-FAX-NUMBER)))(def-rule HAS-FAX-NUMBER531-IS-SUB-PROPERTY-OF-HAS-FAX-NUMBER ((has-fax-number ?x ?y) if (has-fax-number531 ?x ?y)))(def-relation HAS-AUTHOR (?x ?y):pretty-name "has-author")(def-instance HAS-AUTHOR531 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR531-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author531 ?x ?y)))(def-instance HAS-AUTHOR532 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR532-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author532 ?x ?y)))(def-instance HAS-AUTHOR533 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR533-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author533 ?x ?y)))(def-instance HAS-AUTHOR534 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR534-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author534 ?x ?y)))(def-instance HAS-AUTHOR535 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR535-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author535 ?x ?y)))(def-instance HAS-AUTHOR536 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR536-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author536 ?x ?y)))(def-instance HAS-AUTHOR537 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR537-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author537 ?x ?y)))(def-instance HAS-AUTHOR538 binary-relation((Sub-Property-Of HAS-AUTHOR)))(def-rule HAS-AUTHOR538-IS-SUB-PROPERTY-OF-HAS-AUTHOR ((has-author ?x ?y) if (has-author538 ?x ?y)))(def-relation OWNED-BY (?x ?y):pretty-name "owned-by")(def-instance OWNED-BY538 binary-relation((Sub-Property-Of OWNED-BY)))(def-rule OWNED-BY538-IS-SUB-PROPERTY-OF-OWNED-BY ((owned-by ?x ?y) if (owned-by538 ?x ?y)))(def-instance OWNED-BY539 binary-relation((Sub-Property-Of OWNED-BY)))(def-rule OWNED-BY539-IS-SUB-PROPERTY-OF-OWNED-BY ((owned-by ?x ?y) if (owned-by539 ?x ?y)))(def-instance OWNED-BY540 binary-relation((Sub-Property-Of OWNED-BY)))(def-rule OWNED-BY540-IS-SUB-PROPERTY-OF-OWNED-BY ((owned-by ?x ?y) if (owned-by540 ?x ?y)))(def-relation HAS-LOCATION (?x ?y):pretty-name "has-location")(def-instance HAS-LOCATION540 binary-relation((Sub-Property-Of HAS-LOCATION)))(def-rule HAS-LOCATION540-IS-SUB-PROPERTY-OF-HAS-LOCATION ((has-location ?x ?y) if (has-location540 ?x ?y)))(def-instance HAS-LOCATION541 binary-relation((Sub-Property-Of HAS-LOCATION)))(def-rule HAS-LOCATION541-IS-SUB-PROPERTY-OF-HAS-LOCATION ((has-location ?x ?y) if (has-location541 ?x ?y)))(def-relation PUBLISHED-PROCEEDINGS (?x ?y):pretty-name "published-proceedings")(def-instance PUBLISHED-PROCEEDINGS541 binary-relation((Sub-Property-Of PUBLISHED-PROCEEDINGS)))(def-rule PUBLISHED-PROCEEDINGS541-IS-SUB-PROPERTY-OF-PUBLISHED-PROCEEDINGS ((published-proceedings ?x ?y) if (published-proceedings541 ?x ?y)))(def-instance PUBLISHED-PROCEEDINGS542 binary-relation((Sub-Property-Of PUBLISHED-PROCEEDINGS)))(def-rule PUBLISHED-PROCEEDINGS542-IS-SUB-PROPERTY-OF-PUBLISHED-PROCEEDINGS ((published-proceedings ?x ?y) if (published-proceedings542 ?x ?y)))(def-relation HAS-PUBLICATION-REFERENCE (?x ?y):pretty-name "has-publication-reference")(def-instance HAS-PUBLICATION-REFERENCE542 binary-relation((Sub-Property-Of HAS-PUBLICATION-REFERENCE)))(def-rule HAS-PUBLICATION-REFERENCE542-IS-SUB-PROPERTY-OF-HAS-PUBLICATION-REFERENCE ((has-publication-reference ?x ?y) if (has-publication-reference542 ?x ?y)))(def-instance HAS-PUBLICATION-REFERENCE543 binary-relation((Sub-Property-Of HAS-PUBLICATION-REFERENCE)))(def-rule HAS-PUBLICATION-REFERENCE543-IS-SUB-PROPERTY-OF-HAS-PUBLICATION-REFERENCE ((has-publication-reference ?x ?y) if (has-publication-reference543 ?x ?y)))(def-instance HAS-PUBLICATION-REFERENCE544 binary-relation((Sub-Property-Of HAS-PUBLICATION-REFERENCE)))(def-rule HAS-PUBLICATION-REFERENCE544-IS-SUB-PROPERTY-OF-HAS-PUBLICATION-REFERENCE ((has-publication-reference ?x ?y) if (has-publication-reference544 ?x ?y)))(def-relation HAS-PAGE-NUMBERS (?x ?y):pretty-name "has-page-numbers")(def-instance HAS-PAGE-NUMBERS544 binary-relation((Sub-Property-Of HAS-PAGE-NUMBERS)))(def-rule HAS-PAGE-NUMBERS544-IS-SUB-PROPERTY-OF-HAS-PAGE-NUMBERS ((has-page-numbers ?x ?y) if (has-page-numbers544 ?x ?y)))(def-instance HAS-PAGE-NUMBERS545 binary-relation((Sub-Property-Of HAS-PAGE-NUMBERS)))(def-rule HAS-PAGE-NUMBERS545-IS-SUB-PROPERTY-OF-HAS-PAGE-NUMBERS ((has-page-numbers ?x ?y) if (has-page-numbers545 ?x ?y)))(def-instance HAS-PAGE-NUMBERS546 binary-relation((Sub-Property-Of HAS-PAGE-NUMBERS)))(def-rule HAS-PAGE-NUMBERS546-IS-SUB-PROPERTY-OF-HAS-PAGE-NUMBERS ((has-page-numbers ?x ?y) if (has-page-numbers546 ?x ?y)))(def-instance HAS-PAGE-NUMBERS547 binary-relation((Sub-Property-Of HAS-PAGE-NUMBERS)))(def-rule HAS-PAGE-NUMBERS547-IS-SUB-PROPERTY-OF-HAS-PAGE-NUMBERS ((has-page-numbers ?x ?y) if (has-page-numbers547 ?x ?y)))(def-instance HAS-PAGE-NUMBERS548 binary-relation((Sub-Property-Of HAS-PAGE-NUMBERS)))(def-rule HAS-PAGE-NUMBERS548-IS-SUB-PROPERTY-OF-HAS-PAGE-NUMBERS ((has-page-numbers ?x ?y) if (has-page-numbers548 ?x ?y)))(def-relation HAS-URL (?x ?y):pretty-name "has-url")(def-instance HAS-URL548 binary-relation((Sub-Property-Of HAS-URL)))(def-rule HAS-URL548-IS-SUB-PROPERTY-OF-HAS-URL ((has-url ?x ?y) if (has-url548 ?x ?y)))(def-instance HAS-URL549 binary-relation((Sub-Property-Of HAS-URL)))(def-rule HAS-URL549-IS-SUB-PROPERTY-OF-HAS-URL ((has-url ?x ?y) if (has-url549 ?x ?y)))(def-relation HAS-AFFILIATION (?x ?y):pretty-name "has-affiliation")(def-instance HAS-AFFILIATION549 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION549-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation549 ?x ?y)))(def-instance HAS-AFFILIATION550 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION550-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation550 ?x ?y)))(def-instance HAS-AFFILIATION551 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION551-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation551 ?x ?y)))(def-instance HAS-AFFILIATION552 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION552-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation552 ?x ?y)))(def-instance HAS-AFFILIATION553 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION553-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation553 ?x ?y)))(def-instance HAS-AFFILIATION554 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION554-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation554 ?x ?y)))(def-instance HAS-AFFILIATION555 binary-relation((Sub-Property-Of HAS-AFFILIATION)))(def-rule HAS-AFFILIATION555-IS-SUB-PROPERTY-OF-HAS-AFFILIATION ((has-affiliation ?x ?y) if (has-affiliation555 ?x ?y)))(def-relation CONTAINS-ARTICLE (?x ?y):pretty-name "contains-article")(def-instance CONTAINS-ARTICLE555 binary-relation((Sub-Property-Of CONTAINS-ARTICLE)))(def-rule CONTAINS-ARTICLE555-IS-SUB-PROPERTY-OF-CONTAINS-ARTICLE ((contains-article ?x ?y) if (contains-article555 ?x ?y)))(def-instance CONTAINS-ARTICLE556 binary-relation((Sub-Property-Of CONTAINS-ARTICLE)))(def-rule CONTAINS-ARTICLE556-IS-SUB-PROPERTY-OF-CONTAINS-ARTICLE ((contains-article ?x ?y) if (contains-article556 ?x ?y)))(def-relation HAS-AFFILIATION-TO-UNIT (?x ?y):pretty-name "has-affiliation-to-unit")(def-instance HAS-AFFILIATION-TO-UNIT556 binary-relation((Sub-Property-Of HAS-AFFILIATION-TO-UNIT)))(def-rule HAS-AFFILIATION-TO-UNIT556-IS-SUB-PROPERTY-OF-HAS-AFFILIATION-TO-UNIT ((has-affiliation-to-unit ?x ?y) if (has-affiliation-to-unit556 ?x ?y)))(def-instance HAS-AFFILIATION-TO-UNIT557 binary-relation((Sub-Property-Of HAS-AFFILIATION-TO-UNIT)))(def-rule HAS-AFFILIATION-TO-UNIT557-IS-SUB-PROPERTY-OF-HAS-AFFILIATION-TO-UNIT ((has-affiliation-to-unit ?x ?y) if (has-affiliation-to-unit557 ?x ?y)))(def-instance HAS-AFFILIATION-TO-UNIT558 binary-relation((Sub-Property-Of HAS-AFFILIATION-TO-UNIT)))(def-rule HAS-AFFILIATION-TO-UNIT558-IS-SUB-PROPERTY-OF-HAS-AFFILIATION-TO-UNIT ((has-affiliation-to-unit ?x ?y) if (has-affiliation-to-unit558 ?x ?y)))(def-relation CONTAINS-PUBLICATION (?x ?y):pretty-name "contains-publication")(def-instance CONTAINS-PUBLICATION558 binary-relation((Sub-Property-Of CONTAINS-PUBLICATION)))(def-rule CONTAINS-PUBLICATION558-IS-SUB-PROPERTY-OF-CONTAINS-PUBLICATION ((contains-publication ?x ?y) if (contains-publication558 ?x ?y)))(def-instance CONTAINS-PUBLICATION559 binary-relation((Sub-Property-Of CONTAINS-PUBLICATION)))(def-rule CONTAINS-PUBLICATION559-IS-SUB-PROPERTY-OF-CONTAINS-PUBLICATION ((contains-publication ?x ?y) if (contains-publication559 ?x ?y)))(def-instance CONTAINS-PUBLICATION560 binary-relation((Sub-Property-Of CONTAINS-PUBLICATION)))(def-rule CONTAINS-PUBLICATION560-IS-SUB-PROPERTY-OF-CONTAINS-PUBLICATION ((contains-publication ?x ?y) if (contains-publication560 ?x ?y)))(def-instance CONTAINS-PUBLICATION561 binary-relation((Sub-Property-Of CONTAINS-PUBLICATION)))(def-rule CONTAINS-PUBLICATION561-IS-SUB-PROPERTY-OF-CONTAINS-PUBLICATION ((contains-publication ?x ?y) if (contains-publication561 ?x ?y)))(def-relation SENDER-OF-INFORMATION (?x ?y):pretty-name "sender-of-information")(def-instance SENDER-OF-INFORMATION561 binary-relation((Sub-Property-Of SENDER-OF-INFORMATION)))(def-rule SENDER-OF-INFORMATION561-IS-SUB-PROPERTY-OF-SENDER-OF-INFORMATION ((sender-of-information ?x ?y) if (sender-of-information561 ?x ?y)))(def-instance SENDER-OF-INFORMATION562 binary-relation((Sub-Property-Of SENDER-OF-INFORMATION)))(def-rule SENDER-OF-INFORMATION562-IS-SUB-PROPERTY-OF-SENDER-OF-INFORMATION ((sender-of-information ?x ?y) if (sender-of-information562 ?x ?y)))(def-instance SENDER-OF-INFORMATION563 binary-relation((Sub-Property-Of SENDER-OF-INFORMATION)))(def-rule SENDER-OF-INFORMATION563-IS-SUB-PROPERTY-OF-SENDER-OF-INFORMATION ((sender-of-information ?x ?y) if (sender-of-information563 ?x ?y)))(def-relation STUDIES-AT (?x ?y):pretty-name "studies-at")(def-instance STUDIES-AT563 binary-relation((Sub-Property-Of STUDIES-AT)))(def-rule STUDIES-AT563-IS-SUB-PROPERTY-OF-STUDIES-AT ((studies-at ?x ?y) if (studies-at563 ?x ?y)))(def-instance STUDIES-AT564 binary-relation((Sub-Property-Of STUDIES-AT)))(def-rule STUDIES-AT564-IS-SUB-PROPERTY-OF-STUDIES-AT ((studies-at ?x ?y) if (studies-at564 ?x ?y)))(def-relation HAS-TITLE (?x ?y):pretty-name "has-title")(def-instance HAS-TITLE564 binary-relation((Sub-Property-Of HAS-TITLE)))(def-rule HAS-TITLE564-IS-SUB-PROPERTY-OF-HAS-TITLE ((has-title ?x ?y) if (has-title564 ?x ?y)))(def-instance HAS-TITLE565 binary-relation((Sub-Property-Of HAS-TITLE)))(def-rule HAS-TITLE565-IS-SUB-PROPERTY-OF-HAS-TITLE ((has-title ?x ?y) if (has-title565 ?x ?y)))(def-relation EVENT-ATTENDED (?x ?y):pretty-name "event-attended")(def-instance EVENT-ATTENDED565 binary-relation((Sub-Property-Of EVENT-ATTENDED)))(def-rule EVENT-ATTENDED565-IS-SUB-PROPERTY-OF-EVENT-ATTENDED ((event-attended ?x ?y) if (event-attended565 ?x ?y)))(def-instance EVENT-ATTENDED566 binary-relation((Sub-Property-Of EVENT-ATTENDED)))(def-rule EVENT-ATTENDED566-IS-SUB-PROPERTY-OF-EVENT-ATTENDED ((event-attended ?x ?y) if (event-attended566 ?x ?y)))(def-relation INFORMATION-OBJECT-BEING-TRANSFERRED (?x ?y):pretty-name "information-object-being-transferred")(def-instance INFORMATION-OBJECT-BEING-TRANSFERRED566 binary-relation((Sub-Property-Of INFORMATION-OBJECT-BEING-TRANSFERRED)))(def-rule INFORMATION-OBJECT-BEING-TRANSFERRED566-IS-SUB-PROPERTY-OF-INFORMATION-OBJECT-BEING-TRANSFERRED ((information-object-being-transferred ?x ?y) if (information-object-being-transferred566 ?x ?y)))(def-instance INFORMATION-OBJECT-BEING-TRANSFERRED567 binary-relation((Sub-Property-Of INFORMATION-OBJECT-BEING-TRANSFERRED)))(def-rule INFORMATION-OBJECT-BEING-TRANSFERRED567-IS-SUB-PROPERTY-OF-INFORMATION-OBJECT-BEING-TRANSFERRED ((information-object-being-transferred ?x ?y) if (information-object-being-transferred567 ?x ?y)))(def-relation UNIT-OF-ORGANIZATION (?x ?y):pretty-name "unit-of-organization")(def-instance UNIT-OF-ORGANIZATION567 binary-relation((Sub-Property-Of UNIT-OF-ORGANIZATION)))(def-rule UNIT-OF-ORGANIZATION567-IS-SUB-PROPERTY-OF-UNIT-OF-ORGANIZATION ((unit-of-organization ?x ?y) if (unit-of-organization567 ?x ?y)))(def-instance UNIT-OF-ORGANIZATION568 binary-relation((Sub-Property-Of UNIT-OF-ORGANIZATION)))(def-rule UNIT-OF-ORGANIZATION568-IS-SUB-PROPERTY-OF-UNIT-OF-ORGANIZATION ((unit-of-organization ?x ?y) if (unit-of-organization568 ?x ?y)))(def-instance UNIT-OF-ORGANIZATION569 binary-relation((Sub-Property-Of UNIT-OF-ORGANIZATION)))(def-rule UNIT-OF-ORGANIZATION569-IS-SUB-PROPERTY-OF-UNIT-OF-ORGANIZATION ((unit-of-organization ?x ?y) if (unit-of-organization569 ?x ?y)))(def-relation HAS-EMAIL-ADDRESS (?x ?y):pretty-name "has-email-address")(def-instance HAS-EMAIL-ADDRESS569 binary-relation((Sub-Property-Of HAS-EMAIL-ADDRESS)))(def-rule HAS-EMAIL-ADDRESS569-IS-SUB-PROPERTY-OF-HAS-EMAIL-ADDRESS ((has-email-address ?x ?y) if (has-email-address569 ?x ?y)))(def-instance HAS-EMAIL-ADDRESS570 binary-relation((Sub-Property-Of HAS-EMAIL-ADDRESS)))(def-rule HAS-EMAIL-ADDRESS570-IS-SUB-PROPERTY-OF-HAS-EMAIL-ADDRESS ((has-email-address ?x ?y) if (has-email-address570 ?x ?y)))(def-instance HAS-EMAIL-ADDRESS571 binary-relation((Sub-Property-Of HAS-EMAIL-ADDRESS)))(def-rule HAS-EMAIL-ADDRESS571-IS-SUB-PROPERTY-OF-HAS-EMAIL-ADDRESS ((has-email-address ?x ?y) if (has-email-address571 ?x ?y)))(def-relation REQUIRES-HARDWARE-PLATFORM (?x ?y):pretty-name "requires-hardware-platform")(def-instance REQUIRES-HARDWARE-PLATFORM571 binary-relation((Sub-Property-Of REQUIRES-HARDWARE-PLATFORM)))(def-rule REQUIRES-HARDWARE-PLATFORM571-IS-SUB-PROPERTY-OF-REQUIRES-HARDWARE-PLATFORM ((requires-hardware-platform ?x ?y) if (requires-hardware-platform571 ?x ?y)))(def-instance REQUIRES-HARDWARE-PLATFORM572 binary-relation((Sub-Property-Of REQUIRES-HARDWARE-PLATFORM)))(def-rule REQUIRES-HARDWARE-PLATFORM572-IS-SUB-PROPERTY-OF-REQUIRES-HARDWARE-PLATFORM ((requires-hardware-platform ?x ?y) if (requires-hardware-platform572 ?x ?y)))(def-relation ADDRESSES-GENERIC-AREA-OF-INTEREST (?x ?y):pretty-name "addresses-generic-area-of-interest")(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST572 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST572-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest572 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST573 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST573-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest573 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST574 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST574-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest574 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST575 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST575-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest575 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST576 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST576-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest576 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST577 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST577-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest577 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST578 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST578-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest578 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST579 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST579-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest579 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST580 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST580-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest580 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST581 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST581-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest581 ?x ?y)))(def-instance ADDRESSES-GENERIC-AREA-OF-INTEREST582 binary-relation((Sub-Property-Of ADDRESSES-GENERIC-AREA-OF-INTEREST)))(def-rule ADDRESSES-GENERIC-AREA-OF-INTEREST582-IS-SUB-PROPERTY-OF-ADDRESSES-GENERIC-AREA-OF-INTEREST ((addresses-generic-area-of-interest ?x ?y) if (addresses-generic-area-of-interest582 ?x ?y)))(def-relation MEANS-OF-TRANSPORT-USED (?x ?y):pretty-name "means-of-transport-used")(def-instance MEANS-OF-TRANSPORT-USED582 binary-relation((Sub-Property-Of MEANS-OF-TRANSPORT-USED)))(def-rule MEANS-OF-TRANSPORT-USED582-IS-SUB-PROPERTY-OF-MEANS-OF-TRANSPORT-USED ((means-of-transport-used ?x ?y) if (means-of-transport-used582 ?x ?y)))(def-instance MEANS-OF-TRANSPORT-USED583 binary-relation((Sub-Property-Of MEANS-OF-TRANSPORT-USED)))(def-rule MEANS-OF-TRANSPORT-USED583-IS-SUB-PROPERTY-OF-MEANS-OF-TRANSPORT-USED ((means-of-transport-used ?x ?y) if (means-of-transport-used583 ?x ?y)))(def-instance MEANS-OF-TRANSPORT-USED584 binary-relation((Sub-Property-Of MEANS-OF-TRANSPORT-USED)))(def-rule MEANS-OF-TRANSPORT-USED584-IS-SUB-PROPERTY-OF-MEANS-OF-TRANSPORT-USED ((means-of-transport-used ?x ?y) if (means-of-transport-used584 ?x ?y)))(def-relation HAS-AFFILIATED-PERSON (?x ?y):pretty-name "has-affiliated-person")(def-instance HAS-AFFILIATED-PERSON584 binary-relation((Sub-Property-Of HAS-AFFILIATED-PERSON)))(def-rule HAS-AFFILIATED-PERSON584-IS-SUB-PROPERTY-OF-HAS-AFFILIATED-PERSON ((has-affiliated-person ?x ?y) if (has-affiliated-person584 ?x ?y)))(def-instance HAS-AFFILIATED-PERSON585 binary-relation((Sub-Property-Of HAS-AFFILIATED-PERSON)))(def-rule HAS-AFFILIATED-PERSON585-IS-SUB-PROPERTY-OF-HAS-AFFILIATED-PERSON ((has-affiliated-person ?x ?y) if (has-affiliated-person585 ?x ?y)))(def-relation HAS-PERIODICITY (?x ?y):pretty-name "has-periodicity")(def-instance HAS-PERIODICITY585 binary-relation((Sub-Property-Of HAS-PERIODICITY)))(def-rule HAS-PERIODICITY585-IS-SUB-PROPERTY-OF-HAS-PERIODICITY ((has-periodicity ?x ?y) if (has-periodicity585 ?x ?y)))(def-instance HAS-PERIODICITY586 binary-relation((Sub-Property-Of HAS-PERIODICITY)))(def-rule HAS-PERIODICITY586-IS-SUB-PROPERTY-OF-HAS-PERIODICITY ((has-periodicity ?x ?y) if (has-periodicity586 ?x ?y)))(def-relation SUPPORTS-LANGUAGE (?x ?y):pretty-name "supports-language")(def-instance SUPPORTS-LANGUAGE586 binary-relation((Sub-Property-Of SUPPORTS-LANGUAGE)))(def-rule SUPPORTS-LANGUAGE586-IS-SUB-PROPERTY-OF-SUPPORTS-LANGUAGE ((supports-language ?x ?y) if (supports-language586 ?x ?y)))(def-instance SUPPORTS-LANGUAGE587 binary-relation((Sub-Property-Of SUPPORTS-LANGUAGE)))(def-rule SUPPORTS-LANGUAGE587-IS-SUB-PROPERTY-OF-SUPPORTS-LANGUAGE ((supports-language ?x ?y) if (supports-language587 ?x ?y)))(def-relation INFORMATION-TRANSFER-MEDIUM-USED (?x ?y):pretty-name "information-transfer-medium-used")(def-instance INFORMATION-TRANSFER-MEDIUM-USED587 binary-relation((Sub-Property-Of INFORMATION-TRANSFER-MEDIUM-USED)))(def-rule INFORMATION-TRANSFER-MEDIUM-USED587-IS-SUB-PROPERTY-OF-INFORMATION-TRANSFER-MEDIUM-USED ((information-transfer-medium-used ?x ?y) if (information-transfer-medium-used587 ?x ?y)))(def-instance INFORMATION-TRANSFER-MEDIUM-USED588 binary-relation((Sub-Property-Of INFORMATION-TRANSFER-MEDIUM-USED)))(def-rule INFORMATION-TRANSFER-MEDIUM-USED588-IS-SUB-PROPERTY-OF-INFORMATION-TRANSFER-MEDIUM-USED ((information-transfer-medium-used ?x ?y) if (information-transfer-medium-used588 ?x ?y)))(def-relation HAS-WEB-ADDRESS (?x ?y):pretty-name "has-web-address")(def-instance HAS-WEB-ADDRESS588 binary-relation((Sub-Property-Of HAS-WEB-ADDRESS)))(def-rule HAS-WEB-ADDRESS588-IS-SUB-PROPERTY-OF-HAS-WEB-ADDRESS ((has-web-address ?x ?y) if (has-web-address588 ?x ?y)))(def-instance HAS-WEB-ADDRESS589 binary-relation((Sub-Property-Of HAS-WEB-ADDRESS)))(def-rule HAS-WEB-ADDRESS589-IS-SUB-PROPERTY-OF-HAS-WEB-ADDRESS ((has-web-address ?x ?y) if (has-web-address589 ?x ?y)))(def-instance HAS-WEB-ADDRESS590 binary-relation((Sub-Property-Of HAS-WEB-ADDRESS)))(def-rule HAS-WEB-ADDRESS590-IS-SUB-PROPERTY-OF-HAS-WEB-ADDRESS ((has-web-address ?x ?y) if (has-web-address590 ?x ?y)))(def-instance HAS-WEB-ADDRESS591 binary-relation((Sub-Property-Of HAS-WEB-ADDRESS)))(def-rule HAS-WEB-ADDRESS591-IS-SUB-PROPERTY-OF-HAS-WEB-ADDRESS ((has-web-address ?x ?y) if (has-web-address591 ?x ?y)))(def-relation THING-ACTED-ON (?x ?y):pretty-name "thing-acted-on")(def-instance THING-ACTED-ON591 binary-relation((Sub-Property-Of THING-ACTED-ON)))(def-rule THING-ACTED-ON591-IS-SUB-PROPERTY-OF-THING-ACTED-ON ((thing-acted-on ?x ?y) if (thing-acted-on591 ?x ?y)))(def-instance THING-ACTED-ON592 binary-relation((Sub-Property-Of THING-ACTED-ON)))(def-rule THING-ACTED-ON592-IS-SUB-PROPERTY-OF-THING-ACTED-ON ((thing-acted-on ?x ?y) if (thing-acted-on592 ?x ?y)))(def-instance THING-ACTED-ON593 binary-relation((Sub-Property-Of THING-ACTED-ON)))(def-rule THING-ACTED-ON593-IS-SUB-PROPERTY-OF-THING-ACTED-ON ((thing-acted-on ?x ?y) if (thing-acted-on593 ?x ?y)))(def-relation HAS-SUB-UNIT (?x ?y):pretty-name "has-sub-unit")(def-instance HAS-SUB-UNIT593 binary-relation((Sub-Property-Of HAS-SUB-UNIT)))(def-rule HAS-SUB-UNIT593-IS-SUB-PROPERTY-OF-HAS-SUB-UNIT ((has-sub-unit ?x ?y) if (has-sub-unit593 ?x ?y)))(def-instance HAS-SUB-UNIT594 binary-relation((Sub-Property-Of HAS-SUB-UNIT)))(def-rule HAS-SUB-UNIT594-IS-SUB-PROPERTY-OF-HAS-SUB-UNIT ((has-sub-unit ?x ?y) if (has-sub-unit594 ?x ?y)))(def-relation HAS-AMOUNT (?x ?y):pretty-name "has-amount")(def-instance HAS-AMOUNT594 binary-relation((Sub-Property-Of HAS-AMOUNT)))(def-rule HAS-AMOUNT594-IS-SUB-PROPERTY-OF-HAS-AMOUNT ((has-amount ?x ?y) if (has-amount594 ?x ?y)))(def-instance HAS-AMOUNT595 binary-relation((Sub-Property-Of HAS-AMOUNT)))(def-rule HAS-AMOUNT595-IS-SUB-PROPERTY-OF-HAS-AMOUNT ((has-amount ?x ?y) if (has-amount595 ?x ?y)))(def-instance HAS-AMOUNT596 binary-relation((Sub-Property-Of HAS-AMOUNT)))(def-rule HAS-AMOUNT596-IS-SUB-PROPERTY-OF-HAS-AMOUNT ((has-amount ?x ?y) if (has-amount596 ?x ?y)))(def-relation RUNS-ON-OPERATING-SYSTEM (?x ?y):pretty-name "runs-on-operating-system")(def-instance RUNS-ON-OPERATING-SYSTEM596 binary-relation((Sub-Property-Of RUNS-ON-OPERATING-SYSTEM)))(def-rule RUNS-ON-OPERATING-SYSTEM596-IS-SUB-PROPERTY-OF-RUNS-ON-OPERATING-SYSTEM ((runs-on-operating-system ?x ?y) if (runs-on-operating-system596 ?x ?y)))(def-instance RUNS-ON-OPERATING-SYSTEM597 binary-relation((Sub-Property-Of RUNS-ON-OPERATING-SYSTEM)))(def-rule RUNS-ON-OPERATING-SYSTEM597-IS-SUB-PROPERTY-OF-RUNS-ON-OPERATING-SYSTEM ((runs-on-operating-system ?x ?y) if (runs-on-operating-system597 ?x ?y)))(def-relation INVOLVES-ORGANIZATION (?x ?y)"It is sufficient that somebody in unit ?u works in project ?p ":pretty-name "involves-organization":constraint (and (organization ?y)))(def-relation HAS-STATUS (?x ?y):pretty-name "has-status")(def-instance HAS-STATUS597 binary-relation((Sub-Property-Of HAS-STATUS)))(def-rule HAS-STATUS597-IS-SUB-PROPERTY-OF-HAS-STATUS ((has-status ?x ?y) if (has-status597 ?x ?y)))(def-instance HAS-STATUS598 binary-relation((Sub-Property-Of HAS-STATUS)))(def-rule HAS-STATUS598-IS-SUB-PROPERTY-OF-HAS-STATUS ((has-status ?x ?y) if (has-status598 ?x ?y)))(def-relation HAS-SIZE (?x ?y):pretty-name "has-size")(def-instance HAS-SIZE598 binary-relation((Sub-Property-Of HAS-SIZE)))(def-rule HAS-SIZE598-IS-SUB-PROPERTY-OF-HAS-SIZE ((has-size ?x ?y) if (has-size598 ?x ?y)))(def-instance HAS-SIZE599 binary-relation((Sub-Property-Of HAS-SIZE)))(def-rule HAS-SIZE599-IS-SUB-PROPERTY-OF-HAS-SIZE ((has-size ?x ?y) if (has-size599 ?x ?y)))(def-instance FACULTY-OF-SCIENCE-AND-ENGINEERING-AT-EDINBURGH university-faculty((Has-Pretty-Name "Faculty-Of-Science-And-Engineering-At-Edinburgh" )(Unit-Of-Organization UNIVERSITY-OF-EDINBURGH )))(def-instance GLOBAL-GRAPHICS-SOFTWARE public-company"About 600 employees - I guess we consider it a medium-sized organization"((Has-Pretty-Name "Global-Graphics-Software" )(Has-Size MEDIUM-SIZE )))(def-instance JAVASCRIPT scripting-language((Has-Pretty-Name "Javascript" )))(def-instance CGI scripting-language((Has-Pretty-Name "Cgi" )))(def-instance NATO political-organization"nato is both a political organization and a geopolitical entity"((Has-Pretty-Name "Nato" )))(def-instance KMI-WEB-LISP-SERVER server-technology((Has-Pretty-Name "Kmi-Web-Lisp-Server" )(Addresses-Generic-Area-Of-Interest WEB-RESEARCH-AREA )))(def-instance FEMALE-GENDER gender((Has-Pretty-Name "Female-Gender" )))(def-instance MALE-GENDER gender((Has-Pretty-Name "Male-Gender" )))(def-instance MICRO-SIZE organization-size"An organization with no more than 10 employees. It also has to be independent, i.e., less than 25% owned by one enterprise (or jointly by several enterprises) falling outside the definition of micro-sized enterprise."((Has-Pretty-Name "Micro-Size" )))(def-instance SMALL-SIZE organization-size"An organization with no more than 50 employees. It also has to be independent, i.e., less than 25% owned by one enterprise (or jointly by several enterprises) falling outside the definition of small-sized enterprise. Finally, either the turnover total must be less than 7M Euros or the balance sheet total must be less than 5M Euros."((Has-Pretty-Name "Small-Size" )))(def-instance MEDIUM-SIZE organization-size"An organization with no more than 250 employees. It also has to be independent, i.e., less than 25% owned by one enterprise (or jointly by several enterprises) falling outside the definition of medium-sized enterprise. Finally, either the turnover total must be less than 40M Euros or the balance sheet total must be less than 27M Euros."((Has-Pretty-Name "Medium-Size" )))(def-instance LARGE-SIZE organization-size"An organization with more than 250 employees"((Has-Pretty-Name "Large-Size" )))(def-instance VERY-LARGE-SIZE organization-size"An organization with over 10000 employees"((Has-Pretty-Name "Very-Large-Size" )))(def-instance THE-OPEN-UNIVERSITY distance-teaching-university((Has-Pretty-Name "The-Open-University" )(Has-Size LARGE-SIZE )(Has-Sub-Unit KNOWLEDGE-MEDIA-INSTITUTE-AT-THE-OPEN-UNIVERSITY )(Has-Web-Address "http://www.open.ac.uk" )))(def-instance BSC academic-degree((Has-Pretty-Name "Bsc" )))(def-instance BA academic-degree((Has-Pretty-Name "Ba" )))(def-instance MA academic-degree((Has-Pretty-Name "Ma" )))(def-instance MSC academic-degree((Has-Pretty-Name "Msc" )))(def-instance DENG academic-degree((Has-Pretty-Name "Deng" )))(def-instance PHD academic-degree((Has-Pretty-Name "Phd" )))(def-instance UNIX operating-system((Has-Pretty-Name "Unix" )))(def-instance MAC-OS operating-system((Has-Pretty-Name "Mac-Os" )))(def-instance WINDOWS2000 operating-system((Has-Pretty-Name "Windows2000" )))(def-instance EPSRC non-profit-organization((Has-Pretty-Name "Epsrc" )(Has-Size SMALL-SIZE )))(def-instance INFORMATION-EXTRACTION research-area((Has-Pretty-Name "Information-Extraction" )(Sub-Area-Of LANGUAGE-ENGINEERING )))(def-instance LANGUAGE-ENGINEERING research-area((Has-Pretty-Name "Language-Engineering" )))(def-instance KNOWLEDGE-PUBLISHING research-area((Has-Pretty-Name "Knowledge-Publishing" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance KNOWLEDGE-REUSE research-area((Has-Pretty-Name "Knowledge-Reuse" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance KNOWLEDGE-RETRIEVAL research-area((Has-Pretty-Name "Knowledge-Retrieval" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance KNOWLEDGE-MAINTENANCE research-area((Has-Pretty-Name "Knowledge-Maintenance" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance PROBLEM-SOLVING-METHODS research-area((Has-Pretty-Name "Problem-Solving-Methods" )(Sub-Area-Of KNOWLEDGE-MODELLING KNOWLEDGE-REUSE )))(def-instance SEMANTIC-WEB-AREA research-area((Has-Pretty-Name "Semantic-Web-Area" )(Sub-Area-Of WEB-RESEARCH-AREA )))(def-instance WEB-RESEARCH-AREA research-area((Has-Pretty-Name "Web-Research-Area" )))(def-instance ONTOLOGIES research-area((Has-Pretty-Name "Ontologies" )(Sub-Area-Of KNOWLEDGE-MODELLING KNOWLEDGE-REUSE )))(def-instance KNOWLEDGE-MODELLING research-area((Has-Pretty-Name "Knowledge-Modelling" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance KNOWLEDGE-LIFECYCLE research-area((Has-Pretty-Name "Knowledge-Lifecycle" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance INCIDENTAL-KA research-area((Has-Pretty-Name "Incidental-Ka" )(Sub-Area-Of KNOWLEDGE-ACQUISITION )))(def-instance KNOWLEDGE-ACQUISITION research-area((Has-Pretty-Name "Knowledge-Acquisition" )(Sub-Area-Of KNOWLEDGE-MANAGEMENT )))(def-instance KNOWLEDGE-MANAGEMENT research-area((Has-Pretty-Name "Knowledge-Management" )))(def-instance ORGANIZATIONAL-LEARNING research-area((Has-Pretty-Name "Organizational-Learning" )(Sub-Area-Of LEARNING-RESEARCH-AREA )))(def-instance DYNAMIC-LINKING research-area((Has-Pretty-Name "Dynamic-Linking" )(Sub-Area-Of ADAPTIVE-HYPERMEDIA )))(def-instance MULTIMEDIA-RESEARCH-AREA research-area((Has-Pretty-Name "Multimedia-Research-Area" )))(def-instance COLLABORATIVE-HYPERMEDIA research-area((Has-Pretty-Name "Collaborative-Hypermedia" )(Sub-Area-Of HYPERMEDIA )))(def-instance ADAPTIVE-HYPERMEDIA research-area((Has-Pretty-Name "Adaptive-Hypermedia" )(Sub-Area-Of HYPERMEDIA )))(def-instance HYPERMEDIA research-area((Has-Pretty-Name "Hypermedia" )))(def-instance AGENT-BASED-COMPUTING research-area((Has-Pretty-Name "Agent-Based-Computing" )))(def-instance INFORMATION-RETRIEVAL research-area((Has-Pretty-Name "Information-Retrieval" )))(def-instance SOFTWARE-VISUALIZATION research-area((Has-Pretty-Name "Software-Visualization" )(Sub-Area-Of HUMAN-COMPUTER-INTERACTION )))(def-instance HUMAN-COMPUTER-INTERACTION research-area((Has-Pretty-Name "Human-Computer-Interaction" )(Sub-Area-Of COMPUTING-RESEARCH-AREA )))(def-instance TELEPRESENCE-RESEARCH-AREA research-area((Has-Pretty-Name "Telepresence-Research-Area" )))(def-instance E-COMMERCE-RESEARCH-AREA research-area((Has-Pretty-Name "E-Commerce-Research-Area" )))(def-instance COGNITIVE-MODELLING-RESEARCH-AREA research-area((Has-Pretty-Name "Cognitive-Modelling-Research-Area" )))(def-instance ARTIFICIAL-INTELLIGENCE-RESEARCH-AREA research-area((Has-Pretty-Name "Artificial-Intelligence-Research-Area" )))(def-instance COMPUTING-RESEARCH-AREA research-area((Has-Pretty-Name "Computing-Research-Area" )))(def-instance LEARNING-RESEARCH-AREA research-area((Has-Pretty-Name "Learning-Research-Area" )))(def-instance TEMPORARY-CONTRACT employment-contract-type((Has-Pretty-Name "Temporary-Contract" )))(def-instance PERMANENT-CONTRACT employment-contract-type((Has-Pretty-Name "Permanent-Contract" )))(def-instance KNOWLEDGE-MEDIA-INSTITUTE-AT-THE-OPEN-UNIVERSITY r-and-d-institute-within-educational-organization((Has-Pretty-Name "Knowledge-Media-Institute-At-The-Open-University" )(Unit-Of-Organization THE-OPEN-UNIVERSITY )(Has-Size MEDIUM-SIZE )(Has-Telephone-Number 44 )(Has-Web-Address "http://kmi.open.ac.uk" )(Has-Pretty-Name "Knowledge Media Institute" )))(def-instance PART-TIME work-status((Has-Pretty-Name "Part-Time" )))(def-instance FULL-TIME work-status((Has-Pretty-Name "Full-Time" )))(def-instance HARLEQUIN-COMMON-LISP programming-environment((Has-Pretty-Name "Harlequin-Common-Lisp" )(Supports-Language LISP )(Has-Status RELEASED-VERSION )(Runs-On-Operating-System WINDOWS2000 UNIX )(Owned-By XANALYS )))(def-instance EMAIL-MEDIUM information-transfer-medium((Has-Pretty-Name "Email-Medium" )))(def-instance ONTOLINGUA ontology-specification-language((Has-Pretty-Name "Ontolingua" )(Addresses-Generic-Area-Of-Interest KNOWLEDGE-REUSE KNOWLEDGE-MANAGEMENT KNOWLEDGE-MODELLING ONTOLOGIES )))(def-instance EXPERIMENTAL-VERSION software-status((Has-Pretty-Name "Experimental-Version" )))(def-instance BROKEN-VERSION software-status((Has-Pretty-Name "Broken-Version" )))(def-instance RELEASED-VERSION software-status((Has-Pretty-Name "Released-Version" )))(def-instance BETA-VERSION software-status((Has-Pretty-Name "Beta-Version" )))(def-instance ALPHA-VERSION software-status((Has-Pretty-Name "Alpha-Version" )))(def-instance LADY appellation((Has-Pretty-Name "Lady" )))(def-instance SIR appellation((Has-Pretty-Name "Sir" )))(def-instance MRS appellation((Has-Pretty-Name "Mrs" )))(def-instance PROF appellation((Has-Pretty-Name "Prof" )))(def-instance MISS appellation((Has-Pretty-Name "Miss" )))(def-instance MS appellation((Has-Pretty-Name "Ms" )))(def-instance MR appellation((Has-Pretty-Name "Mr" )))(def-instance DR appellation((Has-Pretty-Name "Dr" )))(def-instance UNIVERSITY-OF-ABERDEEN university((Has-Pretty-Name "University-Of-Aberdeen" )(Has-Academic-Unit DEPT-OF-COMPUTING-SCIENCE-AT-ABERDEEN )(Has-Size LARGE-SIZE )(Has-Sub-Unit DEPT-OF-COMPUTING-SCIENCE-AT-ABERDEEN )(Has-Web-Address "http://www.abdn.ac.uk/" )))(def-instance UNIVERSITY-OF-SHEFFIELD university((Has-Pretty-Name "University-Of-Sheffield" )(Has-Academic-Unit DEPT-OF-COMPUTER-SCIENCE-AT-SHEFFIELD )(Has-Size LARGE-SIZE )(Has-Sub-Unit DEPT-OF-COMPUTER-SCIENCE-AT-SHEFFIELD )(Has-Web-Address "http://www.shef.ac.uk" )))(def-instance UNIVERSITY-OF-EDINBURGH university((Has-Pretty-Name "University-Of-Edinburgh" )(Has-Academic-Unit DIVISION-OF-INFORMATICS-AT-EDINBURGH )(Has-Size LARGE-SIZE )(Has-Sub-Unit DIVISION-OF-INFORMATICS-AT-EDINBURGH )(Has-Web-Address "http://www.ed.ac.uk/" )))(def-instance UNIVERSITY-OF-SOUTHAMPTON university((Has-Pretty-Name "University-Of-Southampton" )(Has-Academic-Unit DEPT-OF-ELECTRONICS-AND-COMPUTER-SCIENCE-AT-SOUTHAMPTON )(Has-Size LARGE-SIZE )(Has-Sub-Unit DEPT-OF-ELECTRONICS-AND-COMPUTER-SCIENCE-AT-SOUTHAMPTON )(Has-Web-Address "http://www.ecs.soton.ac.uk" )))(def-instance XANALYS company((Has-Pretty-Name "Xanalys" )(Subsidiary-Of GLOBAL-GRAPHICS-SOFTWARE )(Has-Size SMALL-SIZE )))(def-instance CLIPS knowledge-programming-language((Has-Pretty-Name "Clips" )(Addresses-Generic-Area-Of-Interest KNOWLEDGE-MANAGEMENT KNOWLEDGE-MODELLING )))(def-instance DEPT-OF-ELECTRONICS-AND-COMPUTER-SCIENCE-AT-SOUTHAMPTON academic-unit((Has-Pretty-Name "Dept-Of-Electronics-And-Computer-Science-At-Southampton" )(Unit-Of-Organization UNIVERSITY-OF-SOUTHAMPTON )))(def-instance DIVISION-OF-INFORMATICS-AT-EDINBURGH academic-unit((Has-Pretty-Name "Division-Of-Informatics-At-Edinburgh" )(Unit-Of-Organization UNIVERSITY-OF-EDINBURGH )(Sub-Unit-Of-Organization-Unit FACULTY-OF-SCIENCE-AND-ENGINEERING-AT-EDINBURGH )(Has-Web-Address "http://www.informatics.ed.ac.uk/" )))(def-instance DEPT-OF-COMPUTER-SCIENCE-AT-SHEFFIELD academic-unit((Has-Pretty-Name "Dept-Of-Computer-Science-At-Sheffield" )(Unit-Of-Organization UNIVERSITY-OF-SHEFFIELD )(Has-Web-Address "http://www.dcs.shef.ac.uk" )))(def-instance DEPT-OF-COMPUTING-SCIENCE-AT-ABERDEEN academic-unit((Has-Pretty-Name "Dept-Of-Computing-Science-At-Aberdeen" )(Unit-Of-Organization UNIVERSITY-OF-ABERDEEN )(Has-Web-Address "http://www.csd.abdn.ac.uk/" )))(def-instance WEB-ONTO web-based-editor((Has-Pretty-Name "Web-Onto" )(Requires-Software-Technology-On-Client-Side NETSCAPE-COMMUNICATOR-BROWSER JAVA )(Runs-On-Operating-System-On-Client-Side WINDOWS2000 UNIX )(Requires-Software-Technology-On-Server-Side KMI-WEB-LISP-SERVER HARLEQUIN-COMMON-LISP )(Runs-On-Operating-System-On-Server-Side WINDOWS2000 UNIX )(Supports-Language OCML )(Has-Status RELEASED-VERSION )(Requires-Software-Technology HARLEQUIN-COMMON-LISP KMI-WEB-LISP-SERVER )(Runs-On-Operating-System UNIX WINDOWS2000 )(Owned-By THE-OPEN-UNIVERSITY )(Has-Author JOHN-DOMINGUE )))(def-instance OCML operational-ontology-specification-language((Has-Pretty-Name "Ocml" )(Addresses-Generic-Area-Of-Interest KNOWLEDGE-REUSE KNOWLEDGE-MANAGEMENT ONTOLOGIES KNOWLEDGE-MODELLING )))(def-instance OIL operational-ontology-specification-language((Has-Pretty-Name "Oil" )(Addresses-Generic-Area-Of-Interest KNOWLEDGE-REUSE KNOWLEDGE-MANAGEMENT ONTOLOGIES KNOWLEDGE-MODELLING )))(def-instance DAML+-OIL operational-ontology-specification-language((Has-Pretty-Name "Daml+Oil" )(Addresses-Generic-Area-Of-Interest KNOWLEDGE-REUSE KNOWLEDGE-MANAGEMENT ONTOLOGIES KNOWLEDGE-MODELLING )))(def-instance NETSCAPE-COMMUNICATOR-BROWSER web-browser((Has-Pretty-Name "Netscape-Communicator-Browser" )))(def-instance PERL programming-language((Has-Pretty-Name "Perl" )))(def-instance SMALLTALK programming-language((Has-Pretty-Name "Smalltalk" )))(def-instance C++ programming-language((Has-Pretty-Name "C++" )))(def-instance PROLOG programming-language((Has-Pretty-Name "Prolog" )))(def-instance LISP programming-language((Has-Pretty-Name "Lisp" )))(def-instance JAVA programming-language((Has-Pretty-Name "Java" )))